{
  "name": "data-api",
  "version": "0.0.0",
  "private": false,
  "engines": {
    "": "// heroku recommends that these are set",
    "node": "14.x",
    "yarn": "1.x"
  },
  "scripts": {
    "prestart": "babel ./src --out-dir build",
    "// prestart: build the content of the src folder (to ES5) ": "code may need to run where node version is not configurable",
    "start": "node ./build/bin/www",
    "// start: start the server from the build folder": "",
    "startdev": "DEBUG=express:* nodemon --exec babel-node ./src/bin/www",
    "// startdev: start the server in development mode. note: babel-node; the --exec flag forces babel-node to serve the src/ folder ": "",
    "lint": "./node_modules/.bin/eslint ./src",
    "pretty": "prettier --write '**/*.{js,json}' '!node_modules/**'",
    "// pretty: prettifies code; the postpretty command is run immediately after ": "",
    "postpretty": "yarn lint --fix",
    "// postpretty: auto-fix common linting issues. can just run 'yarn pretty' without running the lint command ": "",
    "// test: executes the tests with nyc and generates three kinds of coverage report:  ": "",
    "// test: * an HTML report, outputted to the coverage/ dir ": "dir is auto-generated",
    "// test: * a text report outputted to the terminal ": "",
    "// test: * an lcov report outputted to the .nyc_output/ dir ": "dir is auto-generated",
    "test": "nyc --reporter=html --reporter=text --reporter=lcov mocha -r @babel/register",
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "// coverage: command uploads the coverage report in the .nyc_output folder to coveralls.io ": "",
    "runQuery": "babel-node ./src/utils/runQuery",
    "commit": "git add --all; git commit -m ",
    "// commit: 'yarn pretty' first ... ": "",
    "push": "git push",
    "// covid data - fetch periodic data, transform periodic and static data, load": "",
    "covid-data": "yarn covid-data-fetch",
    "covid-data-fetch": "yarn covid-data-fetch-us && yarn covid-data-fetch-us-states",
    "covid-data-fetch-us": "wget https://covidtracking.com/api/v1/us/daily.csv -O data/covid-data/covid-tracking/us.csv",
    "covid-data-fetch-us-states": "wget https://covidtracking.com/api/v1/states/daily.csv -O data/covid-data/covid-tracking/states.csv",
    "covid-data-load-local-files": "yarn run babel-node data/load-data/covid-data-load-local-files.js",
    "covid-data-transform": "yarn covid-data-transform-state-abbreviations && yarn covid-data-fetch-us-states",
    "covid-data-transform-state-abbreviations": "yarn run babel-node data/transform-data/transform-covid-data-state-abbreviations",
    "covid-data-transform-state-governor-political-party": "yarn run babel-node data/transform-data/transform-covid-data-state-governor-political-party",
    "covid-data-load-covid-tracking": "./data/load-data/load-data.sh",
    "covid-data-build-views": "./data/build-views/build-views.sh",
    "// last script": ""
  },
  "dependencies": {
    "@babel/cli": "^7.8.4",
    "@babel/core": "^7.8.7",
    "@babel/node": "^7.8.7",
    "@babel/plugin-transform-runtime": "^7.8.3",
    "@babel/preset-env": "^7.8.7",
    "@babel/register": "^7.8.6",
    "@babel/runtime": "^7.8.7",
    "axios": "^0.21.0",
    "cookie-parser": "~1.4.4",
    "csvtojson": "^2.0.10",
    "debug": "~4.3.1",
    "dotenv": "^8.2.0",
    "express": "~4.17.1",
    "express-list-endpoints": "^5.0.0",
    "http-errors": "~1.8.0",
    "morgan": "~1.10.0",
    "node-fetch": "^2.6.1",
    "pg": "8.5.1",
    "serve-static": "^1.14.1"
  },
  "devDependencies": {
    "chai": "^4.2.0",
    "coveralls": "^3.0.9",
    "eslint": "^7.13.0",
    "eslint-config-airbnb-base": "^14.1.0",
    "eslint-plugin-import": "^2.20.1",
    "mocha": "^8.2.1",
    "nodemon": "^2.0.2",
    "nyc": "^15.0.0",
    "prettier": "^2.2.0",
    "sinon": "^9.0.1",
    "sinon-chai": "^3.5.0",
    "supertest": "^6.0.1"
  }
}
